import {NextRequest, NextResponse} from 'next/server';
import {Resend} from 'resend';

const resend = new Resend(process.env.RESEND_API_KEY);

interface ContactFormData {
    name: string;
    phone: string;
    email: string;
    fromAddress?: string;
    fromFloor?: string;
    fromHasLift?: boolean;
    fromNeedCrane?: boolean;
    toAddress?: string;
    toFloor?: string;
    toHasLift?: boolean;
    toNeedCrane?: boolean;
    date?: string;
    needPacking?: boolean;
    needAssembly?: boolean;
    comment?: string;
}

export async function POST(request: NextRequest) {
    try {
        const formData: ContactFormData = await request.json();

        const fromEmail = process.env.NODE_ENV === 'development'
            ? 'onboarding@resend.dev'
            : 'info@shor-hovalot.co.il';

        const {data, error} = await resend.emails.send({
            from: `Bull Moving <${fromEmail}>`,
            to: process.env.EMAIL_TO || 'bullmovings@gmail.com',
            subject: `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–µ—Ä–µ–µ–∑–¥ –æ—Ç ${formData.name || '–ö–ª–∏–µ–Ω—Ç'}`,
            html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; background: #f8f9fa; padding: 20px; border-radius: 10px;">
          <div style="background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
            <h2 style="color: #1890ff; text-align: center; margin-bottom: 30px;">üéØ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–µ—Ä–µ–µ–∑–¥</h2>
            
            <div style="background: #1890ff; color: white; padding: 15px; border-radius: 6px; margin-bottom: 20px;">
              <h3 style="margin: 0; font-size: 18px;">üë§ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
            </div>
            <table style="width: 100%; border-collapse: collapse; margin-bottom: 25px;">
              <tr>
                <td style="padding: 10px; border-bottom: 1px solid #eee; font-weight: bold; width: 40%;">–ò–º—è:</td>
                <td style="padding: 10px; border-bottom: 1px solid #eee;">${formData.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</td>
              </tr>
              <tr>
                <td style="padding: 10px; border-bottom: 1px solid #eee; font-weight: bold;">–¢–µ–ª–µ—Ñ–æ–Ω:</td>
                <td style="padding: 10px; border-bottom: 1px solid #eee;">${formData.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
              </tr>
              <tr>
                <td style="padding: 10px; border-bottom: 1px solid #eee; font-weight: bold;">Email:</td>
                <td style="padding: 10px; border-bottom: 1px solid #eee;">${formData.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
              </tr>
            </table>

            <div style="background: #1890ff; color: white; padding: 15px; border-radius: 6px; margin-bottom: 20px;">
              <h3 style="margin: 0; font-size: 18px;">üìç –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</h3>
            </div>
            <table style="width: 100%; border-collapse: collapse; margin-bottom: 25px;">
              <tr>
                <td style="padding: 10px; border-bottom: 1px solid #eee; font-weight: bold; width: 40%;">–ê–¥—Ä–µ—Å:</td>
                <td style="padding: 10px; border-bottom: 1px solid #eee;">${formData.fromAddress || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
              </tr>
              <tr>
                <td style="padding: 10px; border-bottom: 1px solid #eee; font-weight: bold;">–≠—Ç–∞–∂:</td>
                <td style="padding: 10px; border-bottom: 1px solid #eee;">${formData.fromFloor || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
              </tr>
              <tr>
                <td style="padding: 10px; border-bottom: 1px solid #eee; font-weight: bold;">–õ–∏—Ñ—Ç:</td>
                <td style="padding: 10px; border-bottom: 1px solid #eee;">${formData.fromHasLift ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}</td>
              </tr>
              <tr>
                <td style="padding: 10px; border-bottom: 1px solid #eee; font-weight: bold;">–ù—É–∂–µ–Ω –∫—Ä–∞–Ω:</td>
                <td style="padding: 10px; border-bottom: 1px solid #eee;">${formData.fromNeedCrane ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}</td>
              </tr>
            </table>

            <div style="background: #1890ff; color: white; padding: 15px; border-radius: 6px; margin-bottom: 20px;">
              <h3 style="margin: 0; font-size: 18px;">üéØ –ê–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è</h3>
            </div>
            <table style="width: 100%; border-collapse: collapse; margin-bottom: 25px;">
              <tr>
                <td style="padding: 10px; border-bottom: 1px solid #eee; font-weight: bold; width: 40%;">–ê–¥—Ä–µ—Å:</td>
                <td style="padding: 10px; border-bottom: 1px solid #eee;">${formData.toAddress || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
              </tr>
              <tr>
                <td style="padding: 10px; border-bottom: 1px solid #eee; font-weight: bold;">–≠—Ç–∞–∂:</td>
                <td style="padding: 10px; border-bottom: 1px solid #eee;">${formData.toFloor || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
              </tr>
              <tr>
                <td style="padding: 10px; border-bottom: 1px solid #eee; font-weight: bold;">–õ–∏—Ñ—Ç:</td>
                <td style="padding: 10px; border-bottom: 1px solid #eee;">${formData.toHasLift ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}</td>
              </tr>
              <tr>
                <td style="padding: 10px; border-bottom: 1px solid #eee; font-weight: bold;">–ù—É–∂–µ–Ω –∫—Ä–∞–Ω:</td>
                <td style="padding: 10px; border-bottom: 1px solid #eee;">${formData.toNeedCrane ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}</td>
              </tr>
            </table>

            <div style="background: #1890ff; color: white; padding: 15px; border-radius: 6px; margin-bottom: 20px;">
              <h3 style="margin: 0; font-size: 18px;">üìÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏</h3>
            </div>
            <table style="width: 100%; border-collapse: collapse; margin-bottom: 25px;">
              <tr>
                <td style="padding: 10px; border-bottom: 1px solid #eee; font-weight: bold; width: 40%;">–î–∞—Ç–∞ –ø–µ—Ä–µ–µ–∑–¥–∞:</td>
                <td style="padding: 10px; border-bottom: 1px solid #eee;">${formData.date || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</td>
              </tr>
              <tr>
                <td style="padding: 10px; border-bottom: 1px solid #eee; font-weight: bold;">–£–ø–∞–∫–æ–≤–∫–∞:</td>
                <td style="padding: 10px; border-bottom: 1px solid #eee;">${formData.needPacking ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}</td>
              </tr>
              <tr>
                <td style="padding: 10px; border-bottom: 1px solid #eee; font-weight: bold;">–°–±–æ—Ä–∫–∞/—Ä–∞–∑–±–æ—Ä–∫–∞ –º–µ–±–µ–ª–∏:</td>
                <td style="padding: 10px; border-bottom: 1px solid #eee;">${formData.needAssembly ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}</td>
              </tr>
            </table>

            ${formData.comment ? `
            <div style="background: #1890ff; color: white; padding: 15px; border-radius: 6px; margin-bottom: 20px;">
              <h3 style="margin: 0; font-size: 18px;">üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–ª–∏–µ–Ω—Ç–∞</h3>
            </div>
            <div style="background: #f8f9fa; padding: 15px; border-radius: 6px; border-left: 4px solid #1890ff; margin-bottom: 25px;">
              <p style="margin: 0; color: #555; font-style: italic;">${formData.comment}</p>
            </div>
            ` : ''}

            <div style="text-align: center; color: #666; font-size: 12px; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee;">
              <p>üìß –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}</p>
              <p>üè† Bull Moving - –ü–µ—Ä–µ–≤–æ–∑–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä –∏ –¥–æ–º–æ–≤ —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ–º</p>
            </div>
          </div>
        </div>
      `,
        });

        if (error) {
            console.error('Resend error:', error);
            return NextResponse.json({
                success: false,
                error: error.message
            }, {status: 500});
        }

        console.log('Email sent successfully:', data);
        return NextResponse.json({
            success: true,
            message: 'Email sent successfully',
            data
        });

    } catch (error) {
        console.error('Server error:', error);
        return NextResponse.json({
            success: false,
            error: 'Internal server error'
        }, {status: 500});
    }
}